apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.hackru.oneapp.hackru"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 10
        versionName '2.0.0'
        versionNameSuffix 'prealpha'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        buildTypes.each {
            it.buildConfigField 'String', 'LcsEndpoint', LcsEndpoint
            it.buildConfigField 'String', 'MiscEndpoint', MiscEndpoint
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    /* Android Support Library */
    def support_version = "28.0.0-rc01"
//    def support_version = "28.0.0-alpha1"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation "com.android.support:support-vector-drawable:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:cardview-v7:$support_version"

    /* Networking */

    // We use Retrofit to handle networking
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'

    // Converts json to Java objects and vise versa
    implementation 'com.google.code.gson:gson:2.8.5'

    // Needed for retrofit to automatically use gson to convert json to POJOs
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

    // Allows us to monitor Retrofit networking with logcat
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    /* App Architecture */
    def lifecycle_version = "1.1.1"
    def room_version = "1.1.1"
    def dagger_version = "2.16"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"

    // We use Room for persisting data to local device storage
    implementation "android.arch.persistence.room:runtime:$room_version"

    // Allows us to use Room's required annotations
    kapt "android.arch.persistence.room:compiler:$room_version"

    // We use Dagger for dependency injection
    implementation "com.google.dagger:dagger:$dagger_version"

    // Allows us to use Dagger's required annotations
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    /* QR Codes */
    // Allows us to generate and display QR codes
    implementation 'com.github.kenglxn.QRGen:android:2.4.0'
    // mobile vision for QR code scanning and eventbus which is a dependency.
    implementation 'com.google.android.gms:play-services-vision:15.0.2'
    implementation 'org.greenrobot:eventbus:3.0.0'
    // This library allows us to use a cool pre-made animated checkmark for the scanner
    implementation 'com.github.cdflynn:checkview:v1.1'

    /* Testing and Quality Assurance */
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.2.60"
}
